#!/bin/bash
# Dependencies: curl jq
function main(){
	TOKEN='50272476d2be2355933a3b2afef41dec99d9510f0ab1856af4a5863360eb8929'
	HTTP_METHOD='https'
	DO_API_URL_PREFIX='api.digitalocean.com/v2'
	DROPLET_NAME="Oviedo-WordPress"
	OBJECT=
	JSON="Content-Type: application/json"
	OAUTH="Authorization: Bearer $TOKEN"

	DO_API_GET_LIST <<-GET_LIST_END
		json_images		do_images.json		images
		json_account	do_account.json		#account
		json_droplets	do_droplets.json	droplets
	GET_LIST_END

	URL="droplets"
	DATA=( name region size image ssh_keys backups ipv6 user_data private_networking )
	name="ubuntu-14-04-x64"
	region="nyc3"
	size="512mb"
	image="9476163"
	ssh_keys=null
	backups=false
	ipv6=true
	user_data=null
	private_networking=null

	#json_from_vars DATA | jq .	

	#json_post=$(DO_API_POST DATA URL | jq . | tee do_post.json | tee >(cat) 1>&2)


	return

	DROPLET_ID=$(    FILTER_JSON_ELEMENT droplets name "${DROPLET_NAME}" .id                          <<< "${json_droplets}")
	DROPLET_STATUS=$(FILTER_JSON_ELEMENT droplets name "${DROPLET_NAME}" .status                      <<< "${json_droplets}")
	DROPLET_IP=$(    FILTER_JSON_ELEMENT droplets name "${DROPLET_NAME}" ".networks.v4[0].ip_address" <<< "${json_droplets}")

	DO_API_GET_LIST <<-GET_LIST_END
		json_snapshots	do_snapshots.json	droplets/${DROPLET_ID}/snapshots
		json_actions	do_actions.json		droplets/${DROPLET_ID}/actions
		json_backups	do_backups.json		#droplets/${DROPLET_ID}/backups
	GET_LIST_END

	echo DROPLET_NAME ...: ${DROPLET_NAME} 
	echo DROPLET_ID	.....: ${DROPLET_ID}
	echo DROPLET_STATUS .: ${DROPLET_STATUS}
	echo DROPLET_IP .....: ${DROPLET_IP}

	#FILTER_JSON_ELEMENT actions id 39832443 ".id" <<< "${json_actions}"
	#GET_JSON_ARRAY_OBJECT actions id 39832443 <<< "${json_actions}" | jq .


	URL="droplets/${DROPLET_ID}/actions"
	local DATA=( type name )
	#local DATA=( type )

	local name="${DROPLET_NAME}_$(date +%s)"

	local type="snapshot"
	#local type="power_off"
	#local type="power_on"
	#local type="shutdown"

	#json_post=$(DO_API_POST DATA URL | jq . | tee do_post.json | tee >(cat) 1>&2)
	#json_delete=$(DO_API_DELETE "droplets/${DROPLET_ID}" | jq . | tee do_delete.json | tee >(cat) 1>&2)

}
function IS_REF(){
	local REF=$1
	# test 1: are their any special characters
	# test 2: is first character a digit
	# test 3: is reference set
	! [[ "${REF//[^[:alpha:]_[:digit:]]/@}" =~ @ ]] &&
	[[ "${REF:0:1}" =~ [[:alpha:]_] ]] &&
	(( ${!REF+1} ))
}
function GET_REF(){
	local VAR=$1
	local REF=${2-${!VAR}}
	eval unset ${VAR}
	if IS_REF "${REF}"; then
		# treat all references as arrays
		eval ${VAR}=\( \"\${${REF}[@]}\" \)
	else
		# reference must be data
		eval ${VAR}=\"\${REF}\"
	fi
}
function GET_JSON_ARRAY_OBJECT(){
	local JQ_FILTER PARRENT_ARRAY=$1
	local UNIQUE_ELEMENT_KEY=$2
	local UNIQUE_ELEMENT_VALUE=$3
	read -d $'' JQ_FILTER <<-JQ
		.${PARRENT_ARRAY}[] | select(.${UNIQUE_ELEMENT_KEY}|tostring == "${UNIQUE_ELEMENT_VALUE}")
	JQ
	jq -c -M "${JQ_FILTER}"
}

function FILTER_JSON_ELEMENT(){
	local PARRENT_ARRAY=$1
	local UNIQUE_ELEMENT_KEY=$2
	local UNIQUE_ELEMENT_VALUE=$3
	local JQ_FILTER=$4
	local FILTER_RETURN=$(
		GET_JSON_ARRAY_OBJECT ${PARRENT_ARRAY} ${UNIQUE_ELEMENT_KEY} "${UNIQUE_ELEMENT_VALUE}" |
		jq -c -M "${JQ_FILTER}")
	eval echo "${FILTER_RETURN}"
}
function DO_API_POST(){
	# if arg #1 or arg #2 is unset we should pobably throw an error
	# arg #1 sould be a json string or variable reference
	# arg #2 is a url entry 
	local DO_API_DATA=${1}
	local DO_API_URL=${2}
	GET_REF DO_API_URL
	# test arg #1 checking for a variable reference; if true build json from vars
	if IS_REF "${DO_API_DATA}"; then
		if [ "${DO_API_DATA^^}" == "DATA" ]; then
			local DO_API_DATA=`json_from_vars ${DO_API_DATA} | jq -c -M .${DO_API_DATA}`
		else
			local DO_API_DATA=`json_from_vars ${DO_API_DATA}`
		fi
	fi
	shift
	local OAUTH="Authorization: Bearer $TOKEN"
	local JSON="Content-Type: application/json"
	local DO_API_URL="${HTTP_METHOD}://${DO_API_URL_PREFIX}/${DO_API_URL}"
	curl -X POST -H "${JSON}" -H "${OAUTH}" -d "${DO_API_DATA}" "${DO_API_URL}" 
}
function DO_API_GET_LIST(){
	local JSON_VAR JSON_FN DO_API_URL
	while read JSON_VAR JSON_FN DO_API_URL; do
		echo ${FUNCNAME} :: ${DO_API_URL}
		[ "${JSON_VAR:0:1}" == "#" ] && continue
		[ "${DO_API_URL:0:1}" != "#" ] &&\
		DO_API_GET "${DO_API_URL}" | jq . > "${JSON_FN}"
		eval ${JSON_VAR}="\$(cat ${JSON_FN})"
	done
}
function DO_API_GET(){
	DO_API_ GET "$@"
}
function DO_API_DELETE(){
	DO_API_ DELETE "$@"
}
function DO_API_(){
	local DO_API_X=$1
	local DO_API_URL=${2}
	GET_REF DO_API_URL
	local OAUTH="Authorization: Bearer $TOKEN"
	local JSON="Content-Type: application/json"
	local DO_API_URL="${HTTP_METHOD}://${DO_API_URL_PREFIX}/${DO_API_URL}"
	#curl -X ${DO_API_X} -H "${JSON}" -H "${OAUTH}" "${DO_API_URL}" 2>/dev/null
	curl -X ${DO_API_X} -H "${JSON}" -H "${OAUTH}" "${DO_API_URL}"
}
function value_is_number(){
	(( ${#1} )) || return 1
	#local value=${1//[[:digit:].]/} # this strips out any characters that are not digits or decimal points
	echo ${1//[\$\`]/} |
	egrep '(^[[:digit:]]+$)|(^[[:digit:]]*[.][[:digit:]]*$)' |
	egrep -q -v '^[.]$'
	# the first egrep confirms that the number is formated as a number with or without a single decimal place
	# the second egrep command eliminates the posibility of a value with only a decimal place (a dot)
}
function json_from_vars(){
	local i
	local VAR=$1
	shift
	# if multiple variables were presented join them into a single json object
	if (( ${#@} )); then
		jq -M -c -s '.[0] + .[1]' <(${FUNCNAME} ${VAR}) <(${FUNCNAME} "$@")
		return	
	fi
	# get the contents of the variable VAR
	eval local  VAL=( \"\${${VAR}[@]}\" )
	# if the contents of VAR (VAL) are a list of variables then treat VAR as an object
	while true; do
		for i in `seq 0 $(( ${#VAL[*]} - 1 ))`; do
			# test if contents contain special characters that would disqualify them as variables
			if [[ "${VAL[$i]//[^[:alpha:]_[:digit:]]/@}" =~ @ ]]; then
				break 2
			# test if contents are a set variable
			elif ! (( ${!VAL[$i]+1} )); then
				break 2
			fi
		done
		# recusivelly create the object and then nest it under the parent
		${FUNCNAME} ${VAL[@]} | jq -s -M -c ".[] | { ${VAR}: . }"
		return
	done
	# iterate threw each index
	for i in `seq 0 $(( ${#VAL[*]} - 1 ))`; do
		# escape escapes
		VAL[$i]=${VAL[$i]//\\/\\\\}
		# escape double quotes
		VAL[$i]=${VAL[$i]//\"/\\\"}
		# don't enclose numbers in double quotes
		# don't enclose null|true|false in double quotes
		value_is_number "${VAL[$i]}" ||
		grep -q '^\(true\|false\|null\)$' <<< "${VAL[$i]}" ||
		VAL[$i]=\"${VAL[$i]}\"
		# don't append comma to last index
		(( ${#VAL[*]} - 1 > i ))     && VAL[$i]=${VAL[$i]},
	done
	# generate JSON
	if (( ${#VAL[*]} - 1 )); then
		# if bash var was array
		cat <<-JQ | jq -n -M -c "`cat`"
			{
				${VAR}: [ ${VAL[@]} ]
			}
		JQ
	else
		# if bash var was string
		cat <<-JQ | jq -n -M -c "`cat`"
			{
				${VAR}: ${VAL}
			}
		JQ
	fi
}
function json_add_parent(){
	local parent=${1//[\$\`]/}
	local parent=${parent//[^[:alpha:][:digit:]_]/}
	jq -s -M -c ".[] | { ${parent}: . }"
}
function fdw(){
	local fd=${1:-3}
	eval "cat >&${fd}"
}
function fdc(){
	local fd=${1:-3}
	eval "exec ${fd}<&-"
}
function mkfdrw(){
	local fd=${1:-3}
	fdc ${fd}
	eval "exec ${fd}<><(echo -n)"
}
function fdrw(){
	local BREAK line fd=${1:-3}
	read BREAK < <(tee >(fdw ${fd}) <<< BREAK${RANDOM}BREAK )
	while read -u ${fd} line; do
		[ "${line//[^BREAK[:digit:]]/}" == "${BREAK}" ] && break
		tee >(fdw ${fd}) <<< "${line}"
	done
}
function fdlc(){
	local fd=${1:-3}
	fdrw ${fw} | wc -l
}
function fdrl(){
	# if arg #2 (line count) is unset then all lines in the fd are emptied to stout
	# arg #2 will read from the top (positive integer) or bottom (negative integer) of the fd
	# this function needs a global array: BOOL=( false true )
	local BREAK line fd=${1:-3} lines=${2:-1} read_stack_from_top=${BOOL[(( ${2:-1} >= 0 ))]}
	# to read lines at the bottom of the stack we need to know how many lines are in the stack
	${read_stack_from_top} || local fdl_count=$(fdlc ${fd})
	# we need to add a unique line to the bottom of the stack in order to know when to break the while loop
	read BREAK < <(tee >(fdw ${fd}) <<< BREAK${RANDOM}BREAK )
	while read -u ${fd} line; do
		[ "${line//[^BREAK[:digit:]]/}" == "${BREAK}" ] && break
		if ${read_stack_from_top}; then
			(( lines${2:+--} > 0 )) && cat <<< "${line}" || fdw <<< "${line}"
		else
			(( lines + fdl_count-- > 0 )) && fdw <<< "${line}" || cat <<< "${line}"
		fi
	done
}

main "$@"
