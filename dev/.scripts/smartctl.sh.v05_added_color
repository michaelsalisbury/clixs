#!/bin/bash
shopt -s extglob

function main(){
	while [[ "${1//[^[:alpha:]-]/_}" != +(--|) ]]; do
		local _arg= && case "${_arg:=$1}" in
			-R|--refresh)		REFRESH=true;;
			*)					false;;
		esac
		(( $? )) || { shift; continue; }
		# other code or arg parsing
		shift
	done

	if ${REFRESH:-false}; then
		rm -f "/tmp/${APP}"*
		time get_sources
		echo
	else
		show_data_age
		get_sources
	fi

	local COLUMNS="- ID Age SC Health oC MD ZFS Size Make Model"
	local DISK ID DETAILS SIZE OVERALL TEMPCEL POOL
	while read DISK ID; do
		DETAILS=$(get_disk_details ${DISK})
		   SIZE=$(get_disk_size    ${DISK})
		   TIME=$(get_power_on_time         ${ID})
		TEMPCEL=$(get_temperature           ${ID})
			 MD=$(get_md_devices            ${ID})
		  POOLS=$(get_zfs_pools				${ID})
		 HEALTH=$(get_overall_health        ${ID})
		  COUNT=$(get_reallocated_sector_ct ${ID})
		echo $DISK $ID ${TIME} ${COUNT} ${HEALTH} ${TEMPCEL} ${MD} ${POOLS} ${DETAILS}
	done < <(list_disks) |\
	sed "1i${COLUMNS}" |\
	column -t |\
	sed $'1s/^/\e[4;32m/;1!s/^/\e[0m/'
}
function get_md_devices(){
	local ID=$1
	which mdadm &>/dev/null || { echo "NA"; return 1; }
	local DEVICES UUID
	while read x x UUID; do
		DEVICES="${DEVICES}${DEVICES:+,}$(mdadm --detail --scan 2>/dev/null | grep "${UUID}" | awk '{print substr($2,6)}')"
	done < <(mdadm --examine /dev/disk/by-id/${ID}-* 2>/dev/null | grep "UUID")
	echo ${DEVICES:-NA}
}
function get_zfs_pools(){
	local ID=$1
	which zpool &>/dev/null || { echo "NA"; return 1; }
	local POOLS POOL
	while read POOL; do
		zpool list ${POOL} -v | grep -q "${ID}" && POOLS="${POOLS}${POOLS:+/}${POOL}"
	done < <(zpool list | tail -n +2 | awk {print\ \$1})
	echo "${POOLS:-NA}"
}
function get_sources(){
	local LSHW="/tmp/${APP}.lshw"
	! [ -f "${LSHW}" ] && lshw -short > "${LSHW}" &
	while read DISK ID; do
		! [ -f "/tmp/${APP}.${ID}" ] && smartctl -a /dev/disk/by-id/${ID} > "/tmp/${APP}.${ID}" &
	done < <(list_disks)
	wait
}
function show_data_age(){
	local NOW=$(date +%s)
	local LSHW="/tmp/${APP}.lshw"
	#local LSHW=$(readlink -f "/tmp/config"*)
	local DELIM='.'
	local AGE=$(< <(stat -t "${LSHW}") awk {print\ \$14})
		  AGE=$(( NOW - AGE ))
	# break down total seconds
	local DAYS=$(( AGE / 86400 ))
	local HOURS=${DELIM}$(( AGE % 86400 / 3600 ))
	local MINUTES=${DELIM}$(( AGE % 1440 / 60 ))
	local SECONDS=${DELIM}$(( AGE % 60 ))
	# fix zeros
		  HOURS=${HOURS:(-2)}
		  MINUTES=${MINUTES:(-2)}
		  SECONDS=${SECONDS:(-2)}
	echo $'\e'"[31m"Details are ${DAYS}d${DELIM}${HOURS}h${DELIM}${MINUTES}m${DELIM}${SECONDS}s old\!$'\e'"[0m"
}
function list_disks(){
	ls -l /dev/disk/by-id/ |\
	grep -v part |\
	grep -v \/sr[0-9] |\
	grep ata |\
	awk '{gsub(/[^a-z]/,"",$NF); print $NF" "$9}' |\
	sort
}
function get_disk_size(){
	local DISK=$1
	get_disk_details ${DISK} | awk '{print $1}'
}
function get_disk_details(){
	local DISK=$1
	local LSHW="/tmp/${APP}.lshw"
	sed -n "s/.*${DISK} *disk *//p" "${LSHW}"
}
function get_smart_report_object(){
	local ID=$1
	local FIELD=$2
	shift 2
	local QUERY="$*"
	grep "${QUERY}" "/tmp/${APP}.${ID}" | awk {print\$${FIELD}}
}
function get_overall_health(){
	local ID=$1
	local FIELD='NF'
	local QUERY='overall-health'
	# get total hours
	local HEALTH=$(get_smart_report_object ${ID} ${FIELD} ${QUERY})
	echo ${HEALTH}
}
function get_temperature(){
	local ID=$1
	local FIELD='10'
	local QUERY='Temperature_Celsius'
	# get total hours
	local TEMPCEL=$(get_smart_report_object ${ID} ${FIELD} ${QUERY})
	echo ${TEMPCEL:-NA}
}
function get_reallocated_sector_ct(){
	shopt -s extglob
	local ID=$1
	local FIELD='NF'
	local QUERY='Reallocated_Sector_Ct'
	# get total hours
	local COUNT=$(get_smart_report_object ${ID} ${FIELD} ${QUERY})
	local FIELD='6'
	local THRESH=$(get_smart_report_object ${ID} ${FIELD} ${QUERY})
	echo ${COUNT}/"${THRESH##+(0)}"
}
function get_power_on_time(){
	local DELIM='.'
	local ID=$1
	local FIELD='NF'
	local QUERY='Power_On_Hours'
	# get total hours
	local HOURS=$(get_smart_report_object ${ID} ${FIELD} ${QUERY})
		  HOURS=${HOURS%%[^[:digit:]]*}
	# break down total hours
	local YEARS=$(( HOURS / 24 / 365 ))
	local DAYS=${DELIM}${DELIM}$(( HOURS / 24 % 365 ))
	local HOURS=${DELIM}$(( HOURS % 24 ))
	# fix zeros
	local DAYS=${DAYS:(-3)}
	local HOURS=${HOURS:(-2)}
	# return
	echo ${YEARS}y${DELIM}${DAYS}d${DELIM}${HOURS}h
}
COMM=${0##*[/]}
APP=${COMM%.*}
main "$@"
