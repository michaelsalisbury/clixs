#!/bin/bash

function set_global_vars(){
	# PATHS
	APP=${0##*[/]}
	EXT=${0##*.}
	#WORK=${0%[/]*}
	WORK=${0%${APP}}
	EXEC="${WORK}${WORK:+/}${APP}"
	APP=${APP%.*}
	TMP="/dev/shm/${APP}"
	# LOGS
	LOG="/var/log/incron.scripts/${APP}.log"
	# lock time out
	LOCK_TIMEOUT='60'
}
function sed_escape_string(){
	local sed_special_chars=$'[$^.\/*'
	sed 's/\(['${sed_special_chars}']\)/\\\1/g'
}
function readfd(){
	local fd=${1:-3}
	[ -e "/proc/${BASHPID}/fd/${fd}" ] || return 1
	local IFS=$''
	echo    -n $'\255'  >&${fd}
	# the "-r" argument in the following read command preserves escaped characters
	read -r -d $'\255' -u ${fd}
	printf %s "${REPLY}"
}
function teefd(){
	readfd "$@"
	shift
	(( $# )) || set -- 3
	for fd in $*; do
		[ -e "/proc/${BASHPID}/fd/${fd}" ] || eval "exec ${fd}<><(:)"
		printf %s "${REPLY}" >&${fd}
	done
}
function mkfd(){
	local fd
	(( $# )) || set -- 3
	for fd in $*; do
		[ -e "/proc/${BASHPID}/fd/${fd}" ] || eval "exec ${fd}<><(:)"
	done
}
function clearfd(){
	local fd
	(( $# )) || set -- 3
	for fd in $*; do
		eval "exec ${fd}<><(:)"
	done
}
function closefd(){
	local fd
	(( $# )) || set -- 3
	for fd in $*; do
		eval "exec ${fd}<&-"
	done
}
function set_INCRON_ACTION_TEST(){
	# INCRON
	declare -A INCRON_ACTION_TEST
	for INCRON_ACTION in IN_ACCESS        IN_CREATE\
	                     IN_ATTRIB        IN_OPEN\
	                     IN_MODIFY        IN_CLOSE_WRITE\
	                     IN_MOVED_TO      IN_CLOSE_NOWRITE\
	                     IN_MOVED_FROM    IN_DELETE\
	                     IN_MOVE_SELF     IN_DELETE_SELF
		do INCRON_ACTION_TEST[${INCRON_ACTION}]=true; done
}
function set_SSH_OPT(){
	# SSH
	declare -A SSH_OPTS
	SSH_OPTS["StrictHostKeychecking"]="no"
	SSH_OPTS["PasswordAuthentication"]="no"
	SSH_OPTS["PubkeyAuthentication"]="yes"
	SSH_OPTS["ConnectionAttempts"]=1
	SSH_OPTS["ConnectTimeout"]=1
	for key in ${!SSH_OPTS[@]}; do
		SSH_OPT="${SSH_OPT}${SSH_OPT:+ }-o ${key}=${SSH_OPTS[${key}]}"
	done
}
function sync_lock_(){
	#local lock_path="${WORK}/${APP}.lock"
	#local lock_path_update_request="${WORK}/${APP}.rerun"
	#local lock_timeout=${LOCK_TIMEOUT:-60}
	local action=${1}
	local lock_timeout=${LOCK_TIMEOUT:-60}
	for VAR in action lock_timeout lock_path lock_path_update_request; do
		VAL=${!VAR}
		if ! (( ${#VAL} )); then
			echo Sorry sync_lock variable \"${VAR}\" is not set. Exiting\!
			return 1
		fi
	done
	case "${action}" in
		-e|-E|--enable)		[ -e "${lock_path}" ] && {
						touch "${lock_path_update_request}"
						return 1
					}  || date +%s > "${lock_path}";;
		# --release returns false only if the lock_path_update_request file exists
		-r|-R|--release)	[ -e "${lock_path}" ] && {
						rm -f "${lock_path}" &&
						! rm -f "${lock_path_update_request}" &>/dev/null
					} || return 0;;
		-i|-I|--is-locked)	[ -e "${lock_path}" ];;
		-l|-L|--lapsed)		[ -e "${lock_path}" ] && cat "${lock_path}" | xargs echo $(date +%s) - | bc || return 1;;
		# --timed-out returns true if lock_timout has been reached or the lock files does not exists
		-t|-T|--timed-out)	[ -e "${lock_path}" ] &&
					cat "${lock_path}" | xargs echo \($(date +%s) - ${lock_timeout} \) \< | bc | return `cat` ||
					return 0;;
		-u|-U|--request-update)	[ -e "${lock_path}" ] && touch "${lock_path_update_request}" || {
						rm -f "${lock_path_update_request}"	&>/dev/null
						return 1
					};;
		*)			return 1;;
	esac
}





