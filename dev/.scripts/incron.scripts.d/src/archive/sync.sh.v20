#!/bin/bash


function main(){
	local sync_host
	local sync_path
	# INCRON_MATCH
	if (( ${#INCRON_MATCH} )); then
		set -- "$(get_local_host)" "${INCRON_MATCH}"
	else
		while [[ "${1//[^[:alpha:]-]/_}" != +(--|) ]]; do
			if is_slave "${1}"; then
				sync_host="${1}"
				shift
				sync_path="${1}"
				shift
				continue
			elif [ -e "${1}" ]; then
				sync_path="${1}"
				shift
				continue
			fi

			shift
		done
		[ "${1//[^[:alpha:]-]/_}" == "--" ] && shift
		# find sync_path if not set
		if ! (( ${#sync_path} )); then		
			if ! (( ${#1} )); then
				sync_path="$(pwd -L)"
			elif [ -e "${*}" ]; then
				sync_path="${*}"
			else
				echo ERROR :: Path not valid.  Exiting\!
				exit 1
			fi
		fi
		# generate full path if not absolute
		if [ "${sync_path:0:1}" != "/" ]; then
			local sync_base=${sync_path##*[/]}
			local sync_dir=${sync_path%${sync_base}}
			if (( ${#sync_dir} )); then
				sync_path="$(cd "${sync_dir}"; pwd -L)/${sync_base}"
			else
				sync_path="$(pwd -L)/${sync_base}"
			fi
		fi
		# reset arguments
		set -- "${sync_host:-$(get_local_host)}" "${sync_path}"
	fi
	if is_master; then
		sync_hosts "${@}"
	else
		relay_to_master "${@}"
	fi
}
function sync_hosts(){
	local sync_host=$1
	local sync_path=$2
	local unison_cnt
	local unison_err
	local unison_opt
	local unison_max_tries=10
	local unison_opt_defaults="-auto -batch -times -confirmbigdel=false -logfile=${ULOG}"
	get_host_sync_order "${sync_host}" &>/dev/null
	sync_lock -e "${sync_path}" || { echo BLOCKED; return 1; }
	while read HOST; do
		unison_opt=${unison_opt_defaults}
		if [ -f "${sync_path}" ] || [ -d "${sync_path}" ]; then
			echo Unison :: MODIFY :: ${HOST} :: \"${sync_path}\".
		elif ! [ -e "${sync_path}"]; then
			echo Unison :: DELETE :: ${HOST} :: \"${sync_path}\".
		else
			echo Unison :: _SKIP_ :: ${HOST} :: \"${sync_path}\".
			continue
		fi
		unset unison_cnt
		while (( unison_cnt++ < unison_max_tries )); do
			unison ${unison_opt} "${sync_path}" ssh://${HOST}/"${sync_path}"
			unison_err=$?
			echo Unison :: _EXIT_ :: ${unison_err} | sed 'h;s/./#/g;G;p;x;s/./#/g'
			case "${unison_err}" in
				0)	break;;
				1)	unison_opt+=" -force=newer";;
				3)	unison_opt="${unison_opt_defaults} -ignorearchives";;
				*)	break;;
			esac
		done
		echo Unison :: _POST_ :: ${HOST} :: \"${sync_path}\" | sed 'p;s/./#/g'
	done <<< "${HOST_SYNC_ORDER}"
	sync_lock -r "${sync_path}"
}
function sync_lock(){
	local lock_path=${TMP}":"$(sed 's/[^[:alpha:][:digit:]_./-]/_/g;s/[/]/:/g' <<< "${2}")
	local lock_path_update_request="${lock_path}.rerun"
	sync_lock_ ${1}
}
function get_host_list(){
	sed '/^[[:space:]]*\(#\|$\)/d' "${HOSTS}"
}
function get_local_host(){
	cat <<-GREP | grep -x -i -F -f <(cat) <(get_host_list)
		$(hostname -I | xargs echo)
		$(hostname -f | xargs echo)
		$(hostname -s | xargs echo)
	GREP
}
function get_master_host(){
	get_host_list | head -1
}
function get_slave_hosts(){
	get_host_list | tail -n +2
}
function is_master(){
	local sync_host="${1:-$(get_local_host)}"
	get_master_host | grep -x -q -i -F "${sync_host}"
}
function is_slave(){
	local sync_host="${1:-$(get_local_host)}"
	get_slave_hosts | grep -x -q -i -F "${sync_host}"
}
function elect_local_to_master(){
	echo elect node
	


}
function elect_peer_to_master(){
	echo sync host file with other nodes and re-submit update for sync_path



}
function elect_to_master_check(){
	if [ "${HOSTS:0:1}" != "/" ]; then
		if (( ${#WORK} )); then
			HOSTS="$(cd "${WORK}"; pwd -L)/${HOSTS##*[/]}"
		else
			HOSTS="$(pwd -L)/${HOSTS##*[/]}"
		fi
	fi
	##### sha1sums :: a list of sha1sums of the sync_path on all available peers ordered by popularity
	local sha1sums=$(get_sha1sum_remote_hosts -- "${HOSTS}")
	##### sha1sums_lines :: the number of different versions of the sync_path
	local sha1sums_lines=$(wc -l <<< "${sha1sums}")
	##### 
	local host_cnt0 sha1sum0
	read  host_cnt0 sha1sum0 <<< "${sha1sums}"
	local host_cnt1 sha1sum1
	read  host_cnt1 sha1sum1 <<< "${sha1sums#*$'\n'}"
	##### sha1sums_diff :: the delta between the 2 top most popular versions of the sync_path
	local sha1sums_diff=$(( ${host_cnt0:-0} - ${host_cnt1:-0} ))
	#####
	local HOSTS_sha1sum=$(sha1sum "${HOSTS}" | awk '{print $1}')
	local HOSTS_age=$(stat -c +%Y "${HOSTS}" | tr -d [+\\n])
	#####
	if (( sha1sums_lines == 0 )); then
		echo ERROR :: no other nodes on-line.
		echo ERROR :: develop code to delay sync untill other nodes come on-line.
	elif (( sha1sums_lines == 1 )) && [ "${sha1sum0}" == "${sha1sum_HOSTS}" ]; then
		elect_local_to_master 

	elif (( sha1sums_lines == 1 )) && [ "${sha1sum0}" != "${HOSTS_sha1sum}" ]; then
		elect_peer_to_master

	elif (( sha1sums_lines > 1 )) && [ "${sha1sum0}" == "${sha1sum_HOSTS}" ]; then
		elect_local_to_master

	elif (( sha1sums_lines > 1 )) && (( sha1sums_diff > 1 )); then
		elect_peer_to_master

	elif (( sha1sums_lines > 1 )) && (( sha1sums_diff == 0 )) && [ "${sha1sum1}" == "${HOSTSsha1sum}" ]; then
		elect_local_to_master

	elif (( sha1sums_lines > 1 )) && (( sha1sums_diff == 1 )) && [ "${sha1sum1}" != "${HOSTS_sha1sum}" ]; then
		elect_peer_to_master
		
	elif (( sha1sums_lines > 1 )) && (( sha1sums_diff == 1 )) && [ "${sha1sum1}" == "${HOSTS_sha1sum}" ]; then
		if (( HOSTS_age > $(tail -1 "${TMP}_${sha1sum0}_age") )); then
			elect_local_to_master
		else
			elect_peer_to_master
			

		fi
	fi
}
function get_sha1sum_remote_hosts(){
	local sync_path=$2
	{
		while read HOST; do
			cat <<-SSH |
				stat -c +%Y "${sync_path}" | tr -d + | tr \\\\n \\ 
				sha1sum "${sync_path}"
				cat "${sync_path}"
			SSH
			ssh -q ${SSH_OPT} ${HOST} bash |
			{
				read sync_path_mod_age sha1sum sync_path && {
					cat                        > "${TMP}_${sha1sum}"
					echo ${sync_path_mod_age} >> "${TMP}_${sha1sum}_age"
					echo ${sha1sum}
				}
			} &
		done < <(get_remote_hosts)
	} |
	sort |
	uniq -c
}

function relay_to_master(){
	local max_relay_attempts=2
	local ssh_err
	if [ "${EXEC:0:1}" != "/" ]; then
		if (( ${#WORK} )); then
			EXEC="$(cd "${WORK}"; pwd -L)/${EXEC##*[/]}"
		else
			EXEC="$(pwd -L)/${EXEC##*[/]}"
		fi
	fi
	while read HOST; do
		if get_local_host | grep -q -x -i -F "${HOST}"; then
			elect_to_master_check "$@"			
		fi
		while=${max_relay_attempts} && while (( while-- )); do	
			ssh -n ${SSH_OPT} ${HOST} "${EXEC}" "$@" &&
			break
		done
		ssh_err=$?
		case "${ssh_err}" in
			255)	echo Failed to relay to host \"${HOST}\" :: "$@";;
			127)	echo Failed to run EXEC \"${EXEC}\" on host \"${HOST}\" :: "$@";;
			0)	break;;
			*)	echo EXEC \"${EXEC}\" on host \"${HOST}\" threw ERROR \"${ssh_err}\" :: "$@"
				break;;
		esac
	done < <(get_host_list)
	#ssh ${SSH_OPT} $(get_master_host) "${EXEC}" "$@"
}
function get_remote_hosts(){
	local sync_host=${1:-NULL VOID NO-MATCH}
	cat <<-GREP | grep -x -v -i -F -f <(cat) <(get_host_list)
		${sync_host}
		$(get_local_host)
	GREP
}
function host_sync_order(){
	local sync_host=$1
	grep -x -v -i -F -f <(get_local_host) <<< "${sync_host}"
	get_remote_hosts "${sync_host}"
}
function get_host_sync_order(){
	local sync_host=$1
	[ -z "${HOST_SYNC_ORDER}" ] && HOST_SYNC_ORDER=$(host_sync_order "${sync_host}")
	echo "${HOST_SYNC_ORDER}"
}
. /etc/incron.scripts.d/src/scripts.common.sh
set_global_vars
set_SSH_OPT
### global vars

# LOGS
ULOG="/var/log/incron.scripts/${APP}.unison"

# variables USER and HOME must be exported for unison to run
# variables USER and HOME are not set in cron or incron
export USER=${USER:-$(whoami)}
export HOME=${HOME:-$(eval echo ~${USER})}
HOSTS="${WORK}${WORK:+/}${APP}.hosts"

main "$@" | tee -a "${LOG}"
