<?php
namespace OCA\user_pwauth\lib;

class Configuration {
	const appNameIndex = 1; 
	const DEFAULTS = [
		'list_delim.'   => ';',
		'group_prefix.' => '@',
		'min_ids.'      => '100',
		'uid_list'      => '1000-1100',
		'usr_list'      => '@users',
		'adm_list'      => '@wheel',
		'pwauth_path'   => '/usr/sbin/pwauth',
	];
	const PARAMS = array_merge($self::DEFAULTS,array_flip([
		'uid_uids.',
		'usr_uids.',
		'adm_uids.',
	]));
	/*
	const DEFAULTS = array_filter(
		$self::PARAMS,
		function ($key) {
			return (strpos($key,'.') === false);
		},
		ARRAY_FILTER_USE_KEY
	);
	const LISTS = array_filter(
		$self::PARAMS,
		function ($key) {
			return (strpos($key,'_list') !== false);
		},
		ARRAY_FILTER_USE_KEY
	);
	*/
	private $params = array();

	public function __construct($params = array()) {
		$this->params = $params;
		$this->params['AppName'] = (string)(explode("\\",__NAMESPACE__)[self::appNameIndex]);



	}

	private function dbPushParam($params = NULL) {
		if     (is_string($params)) $params = [ $params ];
		elseif ($params === NULL)   $params = array_keys(self::DEFAULTS);
		
		foreach($params as $param)
			if (isset($this->params[$param])) \OC_Appconfig::setValue(self::getAppName(), $param, $this->params[$param]);
	}
	private function dbPullParam($params = NULL) {
		if     (is_string($params)) $params = [ $params ];
		elseif ($params === NULL)   $params = array_keys(self::DEFAULTS);

		foreach($params as $param)
			$this->params[$param] = \OC_Appconfig::getValue(self::getAppName(), $param, self::DEFAULTS[$param]);
	}

	public function __set($param, $data){
		//if (!isset($this->params[$param])) {
		if (isset($self::PARAMS[$param])) {
			$this->params[$param] = $data;
			$this->dbPushParam($param);
			return true;
		} else {
			return false;
		}
	}
	public function __isset($param){
		return isset($this->params[$param]);
	}
	public function __get($param){
		if (!isset($this->params[$param]) && isset($self::PARAMS[$param]))
			$this->dbPullParam($param);
		return (string)($this->params[$param]);
	}
	private function updateUIDS($param){
		switch ($params) {
			case 'uid_list_uids':
			case 'usr_list_uids':
			case 'adm_list_uids':
				break;
			default:
				return false;
				break;
		}
		
	//		echo '';
		/**
		switch ($param) {
			case 'uid_list':
			case 'usr_list':
			case 'adm_list':
				$list =	explode($params['list_delim'], $params[$param]);
				$users = array();
				$groups = array();
				foreach($list as $item) {
					$item = trim($item);
					#$item = trim(preg_replace('/\s+/',' ', $str))
					if ($item{0} === $params['group_prefix']) {
						$group[] = preg_replace('/\s+/',' ', ltrim($item, $params['group_prefix']));
					} elseif (strpos($item, "-") === FALSE) {
						$users[] = $item;
					} else {
						$range = explode("-", $item);
						$range[0] = (int)(trim(range[0]));
						$range[1] = (int)(trim(range[1]));
						if ($range[0] >= (int)$params['min_id'] &&
						    $range[0] < $range[1])
							for($i = $range[0]; $i <= $range[1]; $i++) $users[] = $i;
					}
				}
	
				break;
		}
		*/
	}	
	public function test(){
		//return (string)'hello';
		//return (string)($defaults['group_prefix']);
		//return (string)($this->params['uid_list']);
		//return self::DEFAULTS['uid_list'];
		return (string)(__NAMESPACE__);
	}

	public static function getAppName(){
		return (string)(explode("\\",__NAMESPACE__)[self::appNameIndex]);
	}
	
	//public function __get(


	//public function updateList( $list = 'uid_list', 
}
