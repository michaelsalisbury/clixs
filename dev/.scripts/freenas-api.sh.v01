#!/bin/bash


#curl	-v -k \
#	-X "GET" \
#	-H "${OAUTH}" \
#	-H "Content-Type: application/json" \
#	"https://10.173.161.111/api/v1.0/storage/volume/"

function main(){
	SYSTEM='10.173.161.111'
	API_USER='root'
	API_PASS='COSTech2010!'
	API_URL_PREFIX=${SYSTEM}'/api/v1.0'
	HTTP_METHOD='https'
	OBJECT=
	JSON="Content-Type: application/json"
	#OAUTH="Authorization: Bearer $TOKEN"
	OAUTH="Authorization: Basic "$(printf "${API_USER}:${API_PASS}" | base64)

	
	#API_URL="storage/volume/"
	#API_ GET "${API_URL}" | jq .
	API_ GET "storage/volume/" | jq .
	#API_ GET API_URL | jq .

}
function API_(){
	# if arg #1 or arg #2 is unset we should pobably throw an error
	# arg #1 is a curl action GET|DELETE|POST
	# arg #2 is a url entry 
	# arg #3 sould be a json string or variable reference; POST action only otherwise ignored
	local API_X=${1^^}
	local API_URL=${2}
	GET_REF API_URL
	#local OAUTH="Authorization: Bearer $TOKEN"
	local OAUTH="Authorization: Basic "$(printf "${API_USER}:${API_PASS}" | base64)
	local JSON="Content-Type: application/json"
	local API_URL="${HTTP_METHOD}://${API_URL_PREFIX}/${API_URL}"
	case "${API_X}" in
		POST|PUT)
			shift 2
			# test arg #1 checking for a variable reference; if true build json from vars
			if IS_REF "$1"; then
				if [ "${1^^}" == "DATA" ]; then
					local API_DATA=`json_from_vars ${@} | jq -c -M .${1}`
				else
					local API_DATA=`json_from_vars ${@}`
				fi
			elif ! (( ${#@} )); then
				echo POST requires json data, API_DATA was empty. 1>&2
				return 1
			else
				local API_DATA="$@"
			fi
			curl -X ${API_X} -H "${JSON}" -H "${OAUTH}" -d "${API_DATA}" "${API_URL}" 
			;;
		GET|DELETE)
			curl -k -X ${API_X} -H "${JSON}" -H "${OAUTH}" "${API_URL}"
			echo "${API_URL}" 1>&2
			;;
		*)
			echo Unknown curl arg \"-X ${DO_API_X}\"
			return 2
			;;
	esac
}
function GET_REF(){
	local VAR=$1
	local REF=${2-${!VAR}}
	eval unset ${VAR}
	if IS_REF "${REF}"; then
		# treat all references as arrays
		eval ${VAR}=\( \"\${${REF}[@]}\" \)
	else
		# reference must be data
		eval ${VAR}=\"\${REF}\"
	fi
}
function IS_REF(){
	local REF=$1
	# test 1: are their any special characters
	# test 2: is first character a digit
	# test 3: is reference set
	! [[ "${REF//[^[:alpha:]_[:digit:]]/@}" =~ @ ]] &&
	[[ "${REF:0:1}" =~ [[:alpha:]_] ]] &&
	(( ${!REF+1} ))
}
main "$@"
