#!/bin/bash
while (( $# )); do
	case "${1//[^[:digit:][:alpha:].-]/}" in
		[0-9].[0-9][0-9]|.[0-9]|\
		[0-9].[0-9]|.[0-9][0-9]|\
		[0-9][0-9].[0-9]|\
		[0-9][0-9]|[0-9])	LAPSE=${1};;
		-[GgMmKk][Bb])		UNITS=${1#?}; UNITS=${UNITS^^};;
	esac
	shift
done
LAPSE=${LAPSE:-0.5}
UNITS=${UNITS:-MB}
case "${UNITS}" in GB) UNITM=3;; MB) UNITM=2;; KB) UNITM=1;; esac
let COUNT++

while true; do
	while (( COUNT-- )); do
	
		# build AWK /proc/spl/kstat/zfs/arcstats grab	
		read -d $'' <<-AWK
			/^size/		{print "arcSizeb[0]="\$3}
			/^misses/	{print "arcMiss[0]="\$3}
			/^hits/		{print "arcHits[0]="\$3}
			/l2_size/	{print "arcSizeb[2]="\$3}
			/l2_misses/ {print "arcMiss[2]="\$3}
			/l2_hits/	{print "arcHits[2]="\$3}
		AWK
		# get /proc/spl/kstat/zfs/arcstats data
		source <(awk "${REPLY}" /proc/spl/kstat/zfs/arcstats)

		# print header
		if ! (( COUNT )); then
			if (( arcSizeb[2] > 0 )); then
				printf '\e[33m'
				echo "|-----------------------------------------------------------------------------------------------------------------------|"
				printf '%-11s %-10s %-10s %-10s %-7s %-2s %-10s %-10s %-10s %-10s %-6s %-2s %-2s %-5s %-3s \n' \
					\|l1reads l1miss l1hits l1hit% size \| l2reads l2misses l2hits l2hit% size disk_access%  \|
				echo "|-----------------------------------------------------------------------------------------------------------------------|"
				printf '\e[0m'
			else
				printf '\e[33m'
				echo "|----------------------------------------------------|"
				printf '%-11s %-10s %-10s %-10s %-7s %-2s %-10s %-10s %-10s %-10s %-6s %-2s %-2s %-5s %-3s \n' \
					\|l1reads l1miss l1hits l1hit% size \|
				echo "|----------------------------------------------------|"
				printf '\e[0m'
			fi
		fi

		# 2 passes: first pass  j=0, i=1 (l1arc)
		#			second pass j=2, i=3 (l2arc is it exists)
		#           
		# last while loop data resides in array var indexs i=1 and i=3
		for i in 0 2; do
			j=$(( i++ ))

			# build BC compute (NOTE: don't use camelback for bc vars, upercase vars throw errors)
			read -d $'' <<-BC
				scale=3
				new_read=(${arcHits[$j]}+${arcMiss[$j]})
				old_read=(${arcRead[$i]:-${arcHits[$j]} + ${arcMiss[$j]}})
				arc_read=( new_read - old_read )
				arc_miss=(${arcMiss[$j]} - ${arcMiss[$i]:-${arcMiss[$j]}})
				arc_hits=(${arcHits[$j]} - ${arcHits[$i]:-${arcHits[$j]}})
				scale=2
				if ( arc_read != 0 ) {
					arc_hitp=(100 * arc_hits / arc_read)
					arc_cache=(100 * arc_miss / arc_read)
				} else {
					arc_hitp=0
					arc_cache=0
				}
				scale=0
				arc_size=( ${arcSizeb[$j]} / 1024^${UNITM} )
				arc_miss
				arc_hits
				arc_read
				arc_hitp
				new_read
				${arcHits[$j]}
				${arcMiss[$j]}
				arc_size
				arc_cache
			BC

			read -d $'' arcMiss[$j] arcHits[$j] arcRead[$j] arcHitp[$j] arcRead[$i] arcHits[$i] arcMiss[$i] arcSize[$j] arc_cache < <(bc -l <<< "${REPLY}")

			# break if no l2arc	
			(( arcSizeb[2] )) || break
		done
		#print data
		if (( arcSizeb[2] > 0 )); then
			printf '\e[33m|\e[0m%-10s %-10s %-10s %-10s %-1s %-2s\e[33m %-2s\e[0m %-10s %-10s %-10s %-10s %-7s %-10s %-7s\e[33m %-1s\e[0m \n' \
				${arcRead[0]} ${arcMiss[0]} ${arcHits[0]} ${arcHitp[0]}% ${arcSize[0]} ${UNITS} \|\
				${arcRead[2]} ${arcMiss[2]} ${arcHits[2]} ${arcHitp[2]}% ${arcSize[2]} ${UNITS} ${arcCache}% \|
		else
			printf '\e[33m|\e[0m%-10s %-10s %-10s %-10s %-1s %-2s\e[33m %-2s\e[0m %-10s %-10s %-10s %-10s %-7s %-10s %-7s\e[33m %-1s\e[0m \n' \
				${arcRead[0]} ${arcMiss[0]} ${arcHits[0]} ${arcHitp[0]}% ${arcSize[0]} ${UNITS} \|
		fi
		sleep ${LAPSE}
	done
	COUNT=25
done
