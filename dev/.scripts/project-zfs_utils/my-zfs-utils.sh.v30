#!/bin/bash

function main(){
	if declare -F "do_${1}" &>/dev/null; then
		local cmd=$1
		shift
		do_$cmd "$@"
	else
		declare -F | sed -n 's/^declare -f do_//p'
	fi
}
function do_help(){
	declare -F | sed -n 's/^declare -f do_//p'
}
function do_dev(){
	get_booted_root_filesystem
}
function do_list_boot_fs_dependents(){
	__list_boot_fs_dependents
}
function do_list_grub_menuentries(){
	__grub_list_menuentries_raw | __sed_escape_string 1
}
function do_list_boot_fs(){
	get_boot_filesystems
	#__grub_list_menuentries_raw | __sed_escape_string 1
}
function do_list_chroot_fs(){
	__list_chroot_fs_cache
}
function do_list_all_vol(){
	< <(__list_chroot_vol_cache) sort
}
function do_list_chroot_vol(){
	__list_chroot_vol_fs
}
function do_grub_set_default(){
	grub-set-default "${1}"
}
function do_grub_reboot(){
	grub-reboot "${1}"
}
function do_update_grub(){
	update-grub
}
function do_remove_zfs_filesystem_empty_sub_folders(){
	local filesystem=$1
	is_zfs_filesystem "${filesystem}" || return 1
	get_zfs_mountpoint_folder_list "${filesystem}" |
		grep -v -x -f <(get_zfs_mountpoint) |
		xargs -i$'\x255' find "$'\x255'" -maxdepth 0 -type d -empty -exec rm -rfv '{}' ';'
}
function do_chroot_vol(){
	__chroot_vol "$@"
}
function do_chroot_boot_fs(){
	__chroot_zfs_filesystem "$@"
}
function do_chroot_fs(){
	__chroot_zfs_filesystem "$@"
}
function do_mount_boot_fs(){
	__mount_zfs_filesystem "$@"
}
function do_mount_fs(){
	__mount_zfs_filesystem "$@"
}
function do_update_zfs_initrd_undo(){
	__update_zfs_initrd "$@"
}
function do_update_zfs_initrd(){
	__update_zfs_initrd "$@"
}
function do_clone_boot_fs(){
	__clone_boot_zfs_filesystem "$@"
}
function do_remove_zfs_filesystem(){
	__remove_boot_zfs_filesystem "$@"
}
function do_add_zfs_filesystem_to_grub(){
	:
}
function is_zfs_volume(){
	local filesystem="${1#/dev/zvol/}"
	zfs list -t volume -H -o name "${filesystem}" &>/dev/null && return 0

	local zd_named_path="/dev/zvol/${filesystem}"
	local zd_real_path=$(readlink -f ${zd_named_path})
	local zd=$(basename "${zd_real_path}")
	local zd_sys_path=$(readlink -f /sys/class/block/${zd})

	# block device is not a partition
	echo part check
	[ -f "${zd_sys_path}/partition" ] || return 1

	local zd_sys_path_parent=${zd_sys_path%/*}
	local zd_parent=$(basename "${zd_sys_path_parent}")
	local zd_named_paths=$(find /dev/zvol -type l -exec echo -n '{} ' ';' -exec readlink -f '{}' ';')
	local zd_named_parent=$(awk -v zd_parent=${zd_parent} '$NF~zd_parent"$"{print $1}' <<< "${zd_named_paths}")

	# parent zfs filesystem could not be matched
	(( ${#zd_named_parent} )) || return 1

	filesystem=${zd_named_parent#/dev/zvol/}
	#echo ${zd_named_parent}
	#echo ${filesystem}

	# recurse
	${FUNCNAME} "${filesystem}"
}
function is_zfs_filesystem(){
	local filesystem=$1
	zfs list -t filesystem -H -o name "${filesystem%/}" &>/dev/null
}
function get_zfs_mountpoint(){
	local filesystem=$1
	if (( ${filesystem:+1} )); then
		zfs list -t filesystem -H -o mountpoint "${filesystem%/}" 2>/dev/null
	else
		zfs list -t filesystem -H -o mountpoint 2>/dev/null
	fi
}
function get_zfs_mountpoint_folder_list(){
	local filesystem=$1
	local mountpoint=$(get_zfs_mountpoint "${filesystem}")
	find "${mountpoint%/}" -maxdepth 1 -type d
}
function is_zfs_mountpoint_default(){
	local filesystem=$1
	zfs list -t filesystem -H -o mountpoint "${filesystem%/}" | grep -q "/${filesystem}"
}
function get_booted_root_filesystem(){
	mount | awk '$3=="/"{print $1}'
}
function get_system_kernels(){
	case "$(get_OS)" in
		Ubuntu)	ls -1 /boot/vmlinuz* 2>/dev/null;;
	esac
}
function get_OS(){
	if which lsb_release &>/dev/null; then
		lsb_release -s -i
	fi
}
function get_(){
	:

}

__sed_escape_string () {
	local count=${1:-1}
	local sed_special_chars=$' >'
	local sed_escape_chars=$'\\\\'
	local sed_escape_chars=$(count=${count//[^[:digit:]]/} < <(printf %$(( count * 2 ))s) sed "s/./${sed_escape_chars}/g")
	sed "s/\([${sed_special_chars}]\)/${sed_escape_chars}\1/g"

}
__grub_list_menuentries_raw () {
	cat <<-AWK | awk -F "['\"]" -f <(cat) /boot/grub/grub.cfg | __sed_escape_string
		/^[ \t]*menuentry[ \t]/{
			menuentry=\$2

			if (submenu_l)
				for (submenu_i = 1; submenu_i <= submenu_l; submenu_i++)
					printf submenus[submenu_i]">"
			print menuentry
		}
		/^[ \t]*submenu[ \t]/{
			submenu_l++
			submenus[submenu_l]=\$2
		}
		/}[ \t]*$/{
			if (menuentry) {
				menuentry=""
			} else if (submenu_l) {
				delete submenus[submenu_l]
				submenu_l--
			}
		}
	AWK
}
__verify_zfs_grub_stor () {
	local filesystem=$1
	if ! is_zfs_filesystem "${filesystem}"; then
		cat <<-ERROR 1>&2
			${filesystem}\" is not a zfs filesystem.
		ERROR
	elif ! [ -d "${zfs_grub_base}/${filesystem}" ]; then
		cat <<-ERROR 1>&2
			The zfs grub stor "${zfs_grub_base}/${filesystem}" for filesystem "${filesystem}" does not exist.
			If the filesystem is boot please use the following commands to ammend and update grub.
			# $0 add_zfs_filesystem_to_grub ${filesystem}
			# $0 update_grub
		ERROR
	else
		return 0
	fi
		return 1
}
__update_zfs_initrd () {
	:
	local filesystem=${1:-$(get_booted_root_filesystem)}
	__verify_zfs_grub_stor "${filesystem}" || return 1
	local zfs_stor="${zfs_grub_base}/${filesystem}"
	local OS=$(get_OS)
	local KERNEL KERNEL_zfs INITRD INITRD_zfs INITRD_vers
	while read KERNEL; do
		case "${OS}" in
			Ubuntu)
				INITRD=$(basename "${KERNEL}")
				INITRD=$(dirname "${KERNEL}")"/${INITRD/vmlinuz-/initrd.img-}"
			;;
		esac
		# set vars
		KERNEL_zfs=$(basename "${KERNEL}")
		INITRD_zfs=$(basename "${INITRD}")
		KERNEL_zfs="${zfs_stor}/${KERNEL_zfs}"
		INITRD_zfs="${zfs_stor}/${INITRD_zfs}"
		
		if [ -d "${zfs_stor}" ] && [ -f "${KERNEL}" ] && [ -f "${INITRD}" ]; then
			# progress/status
			echo -e Processing... \\t KERNEL :: ${KERNEL} \\t INITRD :: ${INITRD}
			case "${FUNCNAME[1]}" in
				do_update_zfs_initrd_undo)
					# test if initrd.img is not new and remove accordingly
					if ! [ -f "${INITRD_zfs}" ]; then
						echo INITRD \"${INITRD_zfs}\" not found so not testing for removal.
					elif diff "${INITRD}" "${INITRD_zfs}" &> /dev/null; then
						rm -vf "${INITRD_zfs}"
						ls -1 "${INITRD_zfs}".v* 2>/dev/null |
							tail -1 |
							xargs -i$'\x255' mv -v "$'\x255'" "${INITRD_zfs}"
					else
						echo INITRD \"${INITRD_zfs}\" differs from \"${INITRD}\" so not removing.
					fi
					;;
				do_update_zfs_initrd)
					# hard link kernel
					if ! [ -f "${KERNEL_zfs}" ]; then
						echo linking ${KERNEL} to ${zfs_stor}
						ln -f "${KERNEL}" "${zfs_stor}/".
					else
						echo KERNEL not updated.
					fi
					# hard link initrd, preserve existing/workig versions
					if ! [ -f "${INITRD_zfs}" ]; then
						echo linking ${INITRD} to ${zfs_stor}
						ln -f "${INITRD}"  "${zfs_stor}/".
					# test if initrd.img is new and increment accordingly
					elif ! diff "${INITRD}" "${INITRD_zfs}" &> /dev/null; then
						INITRD_vers=$(ls -1 "${INITRD_zfs}".v* 2>/dev/null | tail -1)
						INITRD_vers=${INITRD_vers: -2}
						INITRD_vers=0$(( ${INITRD_vers:- -1} + 1 ))
						INITRD_vers=${INITRD_vers: -2}
						mv -v "${INITRD_zfs}"{,.v${INITRD_vers}}
						echo linking ${INITRD} to ${zfs_stor}
						ln -f "${INITRD}"  "${zfs_stor}/".
					else
						echo INITRD not updated.
					fi
					;;
			esac
		fi
	done < <(get_system_kernels)
}
__vet_zfs_base () {
	local filesystem=$1
	if ! is_zfs_filesystem "${filesystem}"; then
		if ! is_zfs_filesystem "${filesystem%%/*}"; then
			echo zfs pool \"${filesystem%%/*}\" does not exists.
			echo new base zfs filesystem for clone cannot be created, cancelling request for clone.
			exit 1
		elif ! is_zfs_filesystem "${filesystem%/*}"; then
			echo zfs parent filesystem \"${filesystem%%/*}\" does not exist.
			echo new base zfs filesystem for clone cannot be created, cancelling request for clone.
			exit 1
		else
			zfs create "${filesystem}"
			echo new base zfs filesystem created... "${filesystem}"
		fi
	else
		# ensure we didn't choose the booted filesystem
		if get_booted_root_filesystem | grep -q -x "${filesystem}"; then
			echo selected base zfs filesystem \"${filesystem}\" is the current mounted root/boot filesystem.
			echo nesting a cloned root/boot filesystem here is ill-advised, cancelling request for clone.
			exit 1
		fi
		# the base zfs filesystem that containes root/boot filesystems should be mounted in it's default location
		if ! is_zfs_mountpoint_default "${filesystem}"; then
			echo selected base zfs filesystem \"${filesystem}\" is not mounted in it\'s default location.
			echo although this is not a technical problem it may indicate that the selected filesystem is not appropriate, cancelling request for clone.
			exit 1
		fi
		# the base zfs filesystem that containes root/boot filesystems should probably not contain any standard folders that are not also zfs filesystems
		# files for in-system documentation are to be expected.
		if get_zfs_mountpoint_folder_list "${filesystem}" | grep -q -v -x -f <(get_zfs_mountpoint); then
			echo selected base zfs filesystem \"${filesystem}\" contains unix folders that are not filesystems.
			echo if they are empty please remove them with the command \"$0 remove_zfs_filesystem_empty_sub_folders\" and try to clone again.
			echo if not then this filesystem may not be appropriate, cancelling request for clone.
			exit 1
		fi
		# the relative grub stor for the base zfs filesystem that containes root/boot grub stors should probably be
		# either empty or contain sub-folders.  if it contains files and no folders it may be root/boot grub stor
		if [ -d "${zfs_grub_base}/${filesystem%/}" ] &&
			 find "${zfs_grub_base}/${filesystem%/}" -maxdepth 1 -type f | read &&
			 ! find "${zfs_grub_base}/${filesystem%/}" -maxdepth 1 -mindepth 1 -type d | read; then
			echo new base zfs filesystem \"${filesystem%/}\" grub stor \"${zfs_grub_base}/${filesystem%/}\" contains files and no directories.
			echo please investigate this filesystem and the related grub stor to be sure it is not a root/boot filesystem.
			echo if you would like to proceed please empty the directory \"${zfs_grub_base}/${filesystem%/}\" of files and try again, cancelling request for clone.
			exit 1
		fi
		# the relative grub stor for the base zfs filesystem that containes root/boot grub stors should be a directory
		if [ -e "${zfs_grub_base}/${filesystem%/}" ] && ! [ -d "${zfs_grub_root}/${filesystem%/}" ]; then
			echo new base zfs \"${filesystem%/}\" grub stor \"${zfs_grub_base}/${filesystem%/}\" path exists but is not a directory, cancelling request for clone.
			exit 1
		fi
		# the relative grub stor for the base zfs filesystem that containes root/boot grub stors needs to be created
		if ! [ -e "${zfs_grub_base}/${filesystem%/}" ]; then
			echo creating zfs base grub stor \"${zfs_grub_base}/${filesystem%/}\".
			mkdir -p "${zfs_grub_base}/${filesystem%/}"
		else
			echo new base zfs filesystem \"${filesystem%/}\" grub stor \"${zfs_grub_base}/${filesystem%/}\" exists and contains no files.
			echo this probably means that the request new base zfs filesystem will work as expected as a container for root/boot filesystems.
		fi
	fi
}
function get_boot_filesystems(){
	find "${zfs_grub_base}" -type d |
		tac |
		awk 'LAST~"^"$0"/"{next}{print;LAST=$0}' |
		sed "s|^${zfs_grub_base}/||" |
		xargs -i"$'\255'" zfs list -H -o name "$'\255'" 2>/dev/null
}
__mount_zfs_filesystem () {
	local filesystem=$1
	#if get_booted_root_filesystem | grep -q -x "${filesystem}"; then
	#	echo the boot filesystem \"${filesystem}\" is the mounted root, cancelling request for mount.
	#	exit 1
	#fi
	if is_zfs_filesystem "${filesystem}"; then
		echo "${filesystem}"
	elif ! (( ${filesystem:+1} )); then
		get_boot_filesystems
	else
		exit 1
	fi |
	while read filesystem; do
		mountpoint=$(zfs list -H -o mountpoint "${filesystem}")
		if get_booted_root_filesystem | grep -q -x "${filesystem}"; then
			echo the boot filesystem \"${filesystem}\" is the mounted root, skipping mount request.
		elif zfs list -H -o mounted "${filesystem}" | grep -q -x "yes"; then
			echo the boot filesystem \"${filesystem}\" is already mounted to \"${mountpoint}\", skipping mount request.
		elif [ "${mountpoint}" == "/" ]; then
			echo the boot filesystem \"${filesystem}\" mountpoint was \"${mountpoint}\", reseting to default and attempting mount.
			zfs set mountpoint="${filesystem}" "${filesystem}"
			zfs mount "${filesystem}"
		else
			echo the boot filesystem \"${filesystem}\" mountpoint is \"${mountpoint}\" but was not mounted, attempting mount.
			zfs mount "${filesystem}"
		fi
	done
	
}

__list_chroot_fs_cache(){
	get_cache 1
}
__list_chroot_fs(){
	# this will list only the filesystem (and not volumes) that have no children
	< <(
		while read name; do
			zfs list -r -H -o name -t filesystem "${name}" 2>/dev/null &
		done < <(
			while read name; do
				zfs list -r -H -o name "${name}" |
				tac |
				awk 'LAST~"^"$0"/"{next}{print;LAST=$0}' |
				tac &
			done < <(
				zpool list -H -o name
			)
		)
	) sort
}

__list_chroot_vol_cache(){
	#get_cache __list_chroot_vol_details 2
	__list_chroot_vol_details
}
__list_chroot_vol_fs(){
	local      zfs_fs ISCHROOT x
	while read zfs_fs ISCHROOT x; do
		${ISCHROOT} && echo ${zfs_fs}
	done < <(< <(__list_chroot_vol_cache) sort)
}





__list_chroot_vol_details(){
	local      zfs_pool zfs_pool_l zfs_fs zfs_fs zfs_fs_l zfs_vols=$(find /dev/zvol -type l)
	local      zd zd_a zd_named_path zd_real_path zd_sys_size512 zd_size_k zd_size_m zd_size_g fouta

	local      ID_PART_ENTRY_TYPES
	declare -A ID_PART_ENTRY_TYPES
	while read ID_PART_ENTRY_TYPE ID_PART_ENTRY_NAME; do
		ID_PART_ENTRY_TYPES[0x${ID_PART_ENTRY_TYPE}]=${ID_PART_ENTRY_NAME}
	done < <(sfdisk -T)

	local    fd_MEM_IN fd_MEM_OUT
	randomfd fd_MEM_IN fd_MEM_OUT fd_MEM_DONE

	(
		local i arg_array
		local    line_count0=$(<<< "${zfs_vols}" wc -l)
		local    line_count1=${line_count0}
		while (( line_count0-- )); do
			read -u ${fd_MEM_IN} -a REPLY
			for i in ${!REPLY[*]}; do
				(( ${REPLY[$i]} > ${arg_array[$i]:-0} )) && arg_array[$i]=${REPLY[$i]}
			done
		done
		while (( line_count1-- )); do
			read -u ${fd_MEM_OUT} -a REPLY
			echo ${arg_array[*]} >& /proc/${REPLY[0]}/fd/${REPLY[1]} &
		done
	) &
	while read zd_named_path; do
		(
			. <(__get_vol_details2 ${zd_named_path})
			local FS=$(__get_vol_fs)

			zfs_fs=${zd_named_path#/dev/zvol/}
			zfs_pool=${zfs_fs%%/*}

			randomfd        fd_SUB
			echo ${BASHPID} ${fd_SUB} >& ${fd_MEM_OUT}

			echo            ${#zfs_fs}      ${#FS}     ${#ZD_SIZE_G}          ${#ZD}      ${#zfs_pool}     ${#UUID} >& ${fd_MEM_IN}
			read -u ${fd_SUB}  zfs_fs_l        FS_l       ZD_SIZE_G_l            ZD_l        zfs_pool_l       UUID_l
			printf        "%-${zfs_fs_l}s  %-${FS_l}s %'${ZD_SIZE_G_l}.3f GB  %-${ZD_l}s  %${zfs_pool_l}s  %-${UUID_l}s\n"\
                            "${zfs_fs}"      ${FS}      ${ZD_SIZE_G}            ${ZD}      ${zfs_pool}       ${UUID}
		) &
		#let line_count++
	done <<< "${zfs_vols}"

	wait
}
__get_vol_fs(){
	if ${ISEXTFS}; then
		local FS=${FILE[4]}
	elif ${ISSWAP}; then
		local FS='SWAP'
	elif ${ISLVM2}; then
		local FS='lvm2'
	elif ${ISDATA}; then
		if (( ${#ID_PART_ENTRY_TYPE} )); then
			local FS=${ID_PART_ENTRY_TYPES[${ID_PART_ENTRY_TYPE}]}
		else
			local FS='data'
		fi
	else
		if (( ${#ID_FS_TYPE} )); then
			local FS=${ID_FS_TYPE}
		elif (( ${#ID_PART_ENTRY_TYPE} )); then
			local FS=${ID_PART_ENTRY_TYPES[${ID_PART_ENTRY_TYPE}]}
		elif (( ${#ID_PART_TABLE_TYPE} )); then
			local FS=${ID_PART_TABLE_TYPE}
		else
			local FS='unknown'
		fi
	fi
	echo "${FS}"
}
__get_vol_details2(){
	local FILE ZD ZD_REAL_PATH ZD_SYS_PATH ZD_REAL_PATH ZD_SYS_SIZE512 zd_named_path=$1
	ZD_REAL_PATH=$(readlink -f ${zd_named_path})
	ZD=$(basename ${ZD_REAL_PATH})
	ZD_SYS_PATH=$(readlink -f /sys/class/block/${ZD})
	ZD_SYS_SIZE512=$(<"${ZD_SYS_PATH}/size")
	blkid -po udev "/dev/${ZD}" &
	echo ZD_SIZE_K=$(bc <<< "scale=3; ${ZD_SYS_SIZE512} / 2") &
	echo ZD_SIZE_M=$(bc <<< "scale=3; ${ZD_SYS_SIZE512} / 2000") &
	echo ZD_SIZE_G=$(bc <<< "scale=3; ${ZD_SYS_SIZE512} / 2000000") &
	read -a FILE < <(< <(file -sL ${zd_named_path}) sed 's/UUID: /UUID=/')
	declare -p FILE &
	declare -p ${!ZD*} &

	[ "boot sector" == "${FILE[*]:2:2}" ]   && echo ISBOOT=true             || echo ISBOOT=false
	[ "filesystem"  == "${FILE[5]}"     ]   && echo ISEXTFS=true            || echo ISEXTFS=false
	[ "swap file"   == "${FILE[*]:2:2}" ]   && echo ISSWAP=true             || echo ISSWAP=false
	[ "LVM2 PV"     == "${FILE[*]:1:2}" ]   && echo ISLVM2=true             || echo ISLVM2=false
	[ "data"        == "${FILE[*]:1}"   ]   && echo ISDATA=true             || echo ISDATA=false
	[[ "${FILE[@]:1}" =~ (UUID=)([^, ]+) ]] && echo UUID=${BASH_REMATCH[2]} || echo UUID=NA
}
__get_vol_details(){
	local      zd_named_path=$1
	local      zd zd_real_path zd_sys_path zd_sys_size512 fout ID_FS_UUID ID_FS_UUID_ENC ID_FS_TYPE
	zd_real_path=$(readlink -f ${zd_named_path})
	zd=$(basename ${zd_real_path})
	zd_sys_path=$(readlink -f /sys/class/block/${zd})
	zd_sys_size512=$(cat ${zd_sys_path}/size)
	fout=$(< <(file -sL ${zd_named_path}) sed 's/UUID: /UUID=/')
	#. <(blkid -o udev /dev/${zd})
	#echo ${zd} ${zd_sys_size512} ${ID_FS_TYPE:-NULL} ${fout}
	echo ${zd} ${zd_sys_size512} ${fout}
}

__chroot_vol () {
	echo start1
	local filesystem="/dev/zvol/${1#/dev/zvol/}"
	local mountpoint="/mnt/zvol/${1#/dev/zvol/}"
	local umount_delay='1'

	is_zfs_volume "${filesystem}" || return 1

	# setup mount point	
	[ -d "${mountpoint}" ] || mkdir -p "${mountpoint}"


	local ID_FS_UUID ID_FS_UUID_ENC ID_FS_TYPE
	. <(blkid -o udev ${filesystem})

	# mount
	echo mounting root
	mount -v -t ${ID_FS_TYPE} "${filesystem}" "${mountpoint}"
	# mount failed
	(( $? )) && return 1
	
	__chroot_mountpoint "${mountpoint}"

	echo unmounting root
	umount -v "${mountpoint}"
	umount -v "${mountpoint}"
	#echo umount \""${mountpoint}"\" | at -q c now + ${umount_delay} minutes 2>/dev/null
}

__chroot_mountpoint () {
	local mountpoint=$1	
	# http://askubuntu.com/questions/528928/how-to-do-underline-bold-italic-strikethrough-color-background-and-size-i
	local U="\e[4m" u="\e[24m"
	local B="\e[1m" b="\e[21m"

	local sep fill path paths="/dev /dev/pts /proc /root /run/resolvconf /sys"
	for path in ${paths}; do (( ${#path} > ${#fill} )) && fill=${path//?/ }; done
	echo preping
	for path in ${paths}; do
		sep=${fill:${#path}}
		if mount | grep -q "[[:space:]]${mountpoint}${path}[[:space:]]"; then
			local device=$(mount | grep "[[:space:]]${mountpoint}${path}[[:space:]]" | sed 's/[[:space:]]on[[:space:]].*//')
			#echo -e path \"${mountpoint}${path}\" "${sep}" already has a mount, \"${device}\", cancelling request for chroot.
			while true; do
				echo -n -e path \"${mountpoint}${path}\" "${sep}" already has a mount, \"${device}\".
				echo -n -e "  [ ${U}u${u}nmount|${U}i${u}gnore|${U}${B}c${u}ancel${b} ] > "
				read -s -t 5 -n 1 -i c
				case "${REPLY,,}" in
					c)	echo cancelling request for chroot.
						return 1;;
					i)	echo ignoring mount warning.
						break;;
					u)	umount "${mountpoint}${path}"
						(( $? )) || break;;
					*)	echo;;
				esac
			done
		elif ! [ -d "${mountpoint}${path}" ]; then
			while true; do
				echo -n -e path \"${mountpoint}${path}\" "${sep}" for mount \"${path}\" does not exist,
				echo -n -e "  [ ${U}m${u}kdir|${U}i${u}gnore|${U}${B}c${u}ancel${b} ] > "
				read -s -t 5 -n 1 -i c
				case "${REPLY,,}" in
					c)	echo cancelling request for chroot.
						return 1;;
					i)	echo ignoring missing path.
						break;;
					m)	mkdir -p "${mountpoint}${path}"
						break;;
					*)	echo;;
				esac
			done
		else
			echo -e path \"${mountpoint}${path}\" "${sep}" ready to bind mount \"${path}\", "${sep}" proceeding.
		fi
	done
	echo mounting
	# mounting 
	for path in ${paths}; do
		sep=${fill:${#path}}
		if mount --bind "${path}" "${mountpoint}${path}"; then
			echo -e path \"${mountpoint}${path}\" "${sep}" bind mounted \"${path}\" "${sep}" successfull.
		else
			echo -e path \"${mountpoint}${path}\" "${sep}" bind mounted \"${path}\" failed, "${sep}" chroot is proceeding, be advised.
		fi
	done
	# chroot
	echo
	#export debian_chroot=$(basename "${filesystem}")
	echo chrooting to \"${mountpoint}\"...
	__chroot__00
	#chroot "${mountpoint}" /bin/bash -c "su -"
	unset debian_chroot
	echo
	# unmount all
	for path in $(echo ${paths} | tr \  \\n | tac); do
		sep=${fill:${#path}}
		if umount "${mountpoint}${path}"; then
			echo -e path \"${mountpoint}${path}\" "${sep}" was unmounted successfull.
		else
			echo -e path \"${mountpoint}${path}\" "${sep}" unmount failed, be advised.
		fi
	done
}
__chroot_zfs_filesystem () {
	local filesystem=$1
	is_zfs_filesystem "${filesystem}" || return 1
	if ! is_zfs_mountpoint_default "${filesystem}"; then
		echo the boot filesystem \"${filesystem}\" is the mounted root, cancelling request for chroot.
		exit 1
	fi
	# ensure that the filesystem is mounted
	if zfs list -H -o mounted "${filesystem}" | grep -q -x "no"; then
		__mount_zfs_filesystem "${filesystem}"
		if zfs list -H -o mounted "${filesystem}" | grep -q -x "no"; then
			echo the boot filesystem \"${filesystem}\" does not seem to want to mount, cancelling request for chroot.
			exit 1
		fi
	fi
	# check that the following paths are not already bind mounted, if they are report and exit
	local mountpoint=$(zfs list -H -o mountpoint "${filesystem}")
	local sep fill path paths="/dev /dev/pts /proc /root /run/resolvconf /sys"
	for path in ${paths}; do (( ${#path} > ${#fill} )) && fill=${path//?/ }; done
	for path in ${paths}; do
		sep=${fill:${#path}}
		if mount | grep -q "[[:space:]]${mountpoint}${path}[[:space:]]"; then
			local device=$(mount | grep "[[:space:]]${mountpoint}${path}[[:space:]]" | sed 's/[[:space:]]on[[:space:]].*//')
			echo -e path \"${mountpoint}${path}\" "${sep}" already has a mount, \"${device}\", cancelling request for chroot.
			exit 1
		elif ! [ -d "${mountpoint}${path}" ]; then
			echo -e path \"${mountpoint}${path}\" "${sep}" for mount \"${path}\" does not exist, "${sep}" cancelling request for chroot.
			exit 1
		else
			echo -e path \"${mountpoint}${path}\" "${sep}" ready to bind mount \"${path}\", "${sep}" proceeding.
		fi
	done
	echo
	# mounting 
	for path in ${paths}; do
		sep=${fill:${#path}}
		if mount --bind "${path}" "${mountpoint}${path}"; then
			echo -e path \"${mountpoint}${path}\" "${sep}" bind mounted \"${path}\" "${sep}" successfull.
		else
			echo -e path \"${mountpoint}${path}\" "${sep}" bind mounted \"${path}\" failed, "${sep}" chroot is proceeding, be advised.
		fi
	done
	# chroot
	echo
	#export debian_chroot=$(basename "${filesystem}")
	echo chrooting to \"${mountpoint}\"...
	__chroot__00
	#chroot "${mountpoint}" /bin/bash -c "su -"
	unset debian_chroot
	echo
	# unmount all
	for path in $(echo ${paths} | tr \  \\n | tac); do
		sep=${fill:${#path}}
		if umount "${mountpoint}${path}"; then
			echo -e path \"${mountpoint}${path}\" "${sep}" was unmounted successfull.
		else
			echo -e path \"${mountpoint}${path}\" "${sep}" unmount failed, be advised.
		fi
	done
}
function __chroot__00(){
	local erase=$'\e[1A\e[s\e[K\e[m'
	local   red='\e[0;31m'
	local green='\e[0;32m'
	local  blue='\e[0;34m'
	local   clr='\e[0m'
	local   PS1="(${red}${filesystem##*/}${clr})${green}\u${clr}@${green}\h${clr}:${blue}\w${clr}\$ "

			#echo -n \$'\e[2A\e[s\e[K\e[m'
	chroot "${mountpoint}" /bin/su - <<-CHROOT
		# since we can't supress "stdin: is not a tty" error, the following ANSI escape sequences cursor movement erases it
		echo -n $'\e[1A\e[s\e[K\e[m'
		# commands within the interactive bash shell seem to echo so we use follow-up cursor movements to erase them as well
		/bin/bash -i -l <<-SHELL
			echo -n $'\e[1A\e[s\e[K\e[m\e[1A\e[s\e[K\e[m'
			export PS1="${PS1}"
			echo -n $'\e[1A\e[s\e[K\e[m\e[1A\e[s\e[K\e[m'
			export TEST=1234
			echo -n $'\e[1A\e[s\e[K\e[m\e[1A\e[s\e[K\e[m'
			exec </dev/tty
		SHELL
	CHROOT
			#exec </dev/tty
			#echo -n \$'\e[2A\e[s\e[K\e[m\e[1B\e[s\e[K\e[m'

	return
	# we are not loading roots profile
	chroot "${mountpoint}" /bin/su - <<-CHROOT
		# since we can't supress "stdin: is not a tty" error, the following ANSI escape sequences cursor movement erases it
		echo -n $'\e[1A\e[s\e[K\e[m'
		export PS1="(${red}${filesystem##*/}${clr})${green}\u${clr}@${green}\h${clr}:${blue}\w${clr}\$ "
		. ~/.bash_aliases
		alias
		/bin/bash --norc --noprofile </dev/tty
		#/bin/bash --norc </dev/tty
		#/bin/bash --noprofile </dev/tty
	CHROOT
	#chroot "${mountpoint}" /bin/su -c 'export debian_chroot="1234"; /bin/bash' -

	return
	# stdin: is not a tty
	chroot "${mountpoint}" /bin/su - <<-CHROOT
		export debian_chroot="1234"
		/bin/bash </dev/tty
	CHROOT

	return
	# no error
	chroot "${mountpoint}" /bin/su -

	return
	# stdin: is not a tty
	chroot "${mountpoint}" /bin/bash <<-CHROOT
		/bin/su - <<-SU
			export debian_chroot="1234"
			/bin/bash </dev/tty
		SU
	CHROOT

	return
	# groups: cannot find name for group ID 127
	# debian_chroot works
	# we don't login to the home directory	
	chroot "${mountpoint}" /bin/bash <<-CHROOT
		export debian_chroot="1234"
		echo debain_chroot=\$debian_chroot
		/bin/bash -l -i </dev/tty
	CHROOT

	return
	# no errors
	chroot "${mountpoint}" /bin/bash <<-CHROOT
		su - </dev/tty
	CHROOT

	return
	# stdin: is not a tty	
	chroot "${mountpoint}" /bin/bash <<-CHROOT
		su -
	CHROOT
	# no errors
	chroot "${mountpoint}" /bin/bash -c "su -"

	return
	# groups: cannot find name for group ID 127
	# echo exec
	chroot "${mountpoint}" <<-CHROOT
		exec </dev/tty
	CHROOT
}
__list_boot_fs_dependents () {
	local filesystem=${1:-$(get_booted_root_filesystem)}
	is_zfs_filesystem "${filesystem}" || return 1
	local zfs_pool=${filesystem%%/*}
	zfs list -t filesystem -H -o name,origin -r "${zfs_pool}" |
		sed -n "\|[[:space:]]${filesystem}@.*|s|[[:space:]]${filesystem}@.*||p"

}
__remove_boot_zfs_filesystem () {
	local filesystem=$1
	is_zfs_filesystem "${filesystem}" || return 1
	local zfs_stor="${zfs_grub_base}/${filesystem}"
	# filesystem should not be current booted root
	if get_booted_root_filesystem | grep -q -x "${filesystem}"; then
		echo the boot filesystem \"${filesystem}\" is the mounted root, cancelling request for removal.
		echo
		exit 1
	fi

	# filesystem should not have dependent clones
	if < <(do_dependent_zfs_filesystems_list "${filesystem}") read; then
		echo the boot filesystem \"${filesystem}\" has dependent clone filesystems, cancelling request for removal.
		echo
		echo Dependent Clone Filesystems
		echo "${REPLY}"
		echo
		exit 1
	fi

	# filesystem should not have any nested filesystems or volumes
	if < <(zfs list -t volume,filesystem -H -o name  -r -d 1 "${filesystem}" | grep -v -x "${filesystem}" && echo -n $'\x255') read -d $'\x255'; then
		echo the boot filesystem \"${filesystem}\" has nested filesystems or volumes, cancelling request for removal.
		echo
		echo Nested Filesystems or Volumes
		echo "${REPLY}"
		exit 1
	fi

	# the grub stor should exist and not have any sub-folders
	if [ -e "${zfs_stor}" ] && ! [ -d "${zfs_stor}" ]; then
			echo the filesystem \"${filesystem%/}\" grub stor \"${zfs_grub_base}/${filesystem%/}\" exists but is not a directory, cancelling request for removal.
			exit 1
	elif [ -d "${zfs_stor}" ] && < <(find "${zfs_stor}" -maxdepth 1 -mindepth 1 -type d && echo -n $'\x255') read -d $'\x255'; then
			echo the filesystem \"${filesystem%/}\" grub stor \"${zfs_grub_base}/${filesystem%/}\" exists but has sub-directories, cancelling request for removal.
			exit 1
	elif ! [ -e "${zfs_stor}" ]; then
			echo the filesystem \"${filesystem%/}\" grub stor \"${zfs_grub_base}/${filesystem%/}\" does not exists, cancelling request for removal.
			exit 1
	fi

	# destroy filesystem and related snapshots automatically
	if ! zfs destroy -r "${filesystem}"; then
		echo the filesystem \"${filesystem%/}\" could not be recursivelly destroyed, cancelling request for removal.
		exit 1
	fi

	# remove grub stor
	rm -rvf -- "${zfs_stor}"
}
__clone_boot_zfs_filesystem () {
	local filesystem alt_zfs_name alt_version alt_zfs_base
	while [[ "${1//[^[:alpha:]-]/_}" != +(--|) ]]; do
			case "${1}" in
				--name)		shift
							alt_zfs_name=$1;;
				--version)	shift
							alt_version=0000${1//[^[:digit:]]/}
							alt_version=${alt_version: -4};;
				--zfs-base)	shift
							alt_zfs_base=$1
							vet_zfs_base "${alt_zfs_base}";;
				*)			is_zfs_filesystem "$1" && filesystem=$1;;
			esac
			shift
	done
	local filesystem=${filesystem:-$(get_booted_root_filesystem)}
	local zfs_stor="${zfs_grub_base}/${filesystem%/}"
	local OS=$(get_OS)
	
	# set base zfs filesystem
	(( ${alt_zfs_base:+1} )) && local zfs_base=${alt_zfs_base} || local zfs_base=$(dirname "${filesystem%/}")

	# verify that the filesystem to be cloned has a zfs grub stor with files in it
	# we are assuming that if it does that amongst those files are kernels and initrds
	# we also assume that retained versions (files that end in *.v[:digit:][:digit:]) are not esential
	if ! __verify_zfs_grub_stor "${filesystem%/}"; then
		echo cancelling request for clone.
		exit 1
	elif [ -d "${zfs_grub_base}/${filesystem%/}" ] &&
		 ! find "${zfs_grub_base}/${filesystem%/}" -maxdepth 1 -type f | sed -n 2p | read; then
		echo selected zfs filesystem \"${filesystem%/}\" to clone has less than 2 files
		echo in it\'s zfs grub stor \"${zfs_grub_base}/${filesystem%/}\", cancelling request for clone.
		exit 1
	elif [ -d "${zfs_grub_base}/${filesystem%/}" ] &&
		 find "${zfs_grub_base}/${filesystem%/}" -maxdepth 1 -mindepth 1 -type d | read; then
		echo selected zfs filesystem \"${filesystem%/}\" to clone has directories
		echo in it\'s zfs grub stor \"${zfs_grub_base}/${filesystem%/}\", cancelling request for clone.
		exit 1
	fi

	# if a new name is supplied then date or version components of the filesystem name do not need to be verified
    # if the name exists then the version number if not supplied will be automatically calculated
	if (( ${alt_zfs_name:+1} )); then
		local zfs_name=${alt_zfs_name}
	# if only a version number is supplied verify that date and version components are not malformed and
	# that the supplied version number is equal to or greater than what would have been automatically calculated
	elif (( ${alt_version:+1} )); then
		if is_date_in_filesystem_name_malformed "${filesystem}"; then
			echo filesystem name \"${filesystem}\" does not have the expected date component or it is malformed.
			echo filesystem name is expected to be in the format [name]-[version]-[date +%Y.%m.%d].
			echo we will not be able to extrapolate the appropriate name component for the clone.
			echo either don\'t specify a version or specify a new name, cancelling request for clone.
			exit 1
		elif is_version_in_filesystem_name_malformed "${filesystem}"; then
			echo filesystem name \"${zfs_name}\" does not have the expected version component or it is malfomed.
			echo filesystem name is expected to be in the format [name]-[version]-[date +%Y.%m.%d].
			echo we will not be able to extrapolate the appropriate name component for the clone.
			echo either don\'t specify a version or specify a new name, cancelling request for clone.
			exit 1
		else
			local zfs_name=$(get_name_in_filesystem_name "${filesystem}")
			
		fi
	# if neither a name nor a version are supplied then check that date and version are not malformed
	# if date or version are malformed then assume the filesystem name is the base name for the clone
	else
		if is_date_in_filesystem_name_malformed "${filesystem}"; then
			local zfs_name=$(basename "${filesystem%/}")
		elif is_version_in_filesystem_name_malformed "${filesystem}"; then
			local zfs_name=$(basename "${filesystem%/}")
		else
			local zfs_name=$(get_name_in_filesystem_name "${filesystem}")
		fi
	fi
	# calculate version
	local version=$(get_next_version_for_filesystem_name "${zfs_base}" "${zfs_name}")
	# if alternate version is selected verify that it is in range
	if (( ${alt_version:+1} )); then
		if (( alt_version >= version )); then
			version=${alt_version}
		else
			echo the selected alternate version number \"${alt_version}\" is not within range.
			echo the version must be greater than to equal to the \"${version}\", cancelling request for clone.
			exit 1
		fi
	fi
	# calculate date, prep vars
	local zfs_date=$(get_date_for_clone_filesystem_name)
	local zfs_snap="${filesystem}@${zfs_name}-${version}-${zfs_date}"
	local zfs_clone="${zfs_base}/${zfs_name}-${version}-${zfs_date}"
	local zfs_grub_seed="${zfs_grub_base}/${filesystem}"
	local zfs_grub_stor="${zfs_grub_base}/${zfs_clone}"

	# make zfs_grub_stor and copy files from zfs_grub_seed
	# zfs_grub_stor should either not exists or be empty if not we should exit with error
	if [ -e "${zfs_grub_stor}" ] && ! [ -d "${zfs_grub_stor}" ]; then
		echo zfs_grub_stor \"${zfs_grub_stor}\" for clone filesystem \"${zfs_clone}\" exists but is not a directory.
		echo please rectify this before proceeding, try again when ready, cancelling request for clone.
		exit 1
	elif [ -d "${zfs_grub_stor}" ] && ! find "${zfs_grub_stor}" -maxdepth 0 -empty | read; then
		echo zfs_grub_stor \"${zfs_grub_stor}\" for clone filesystem \"${zfs_clone}\" exists but is not empty.
		echo please rectify this before proceeding, try again when ready, cancelling request for clone.
		exit 1
	else
		echo creating zfs_grub_stor \"${zfs_grub_stor}\"
		mkdir -p "${zfs_grub_stor}"
		echo populating zfs_grub_stor \"${zfs_grub_stor}\"
		find "${zfs_grub_seed}" -mindepth 1 -not -iname '*.v??' -exec cp -f '{}' "${zfs_grub_stor}" ';'
	fi

	# snapshot filesystem, if this snapshot already exists then skip this step
	if zfs list -t snapshot -H -o name "${zfs_snap}" &>/dev/null; then
		echo snapshot \"${zfs_snap}\" already exists, this must be a repeat try, moving to clone.
		echo if you need a fresh snapshot then please remove this one using the command \"zfs destroy [snapshot]\"
	else
		echo taking zfs snapshot \"${zfs_snap}\"
		zfs snapshot "${zfs_snap}"
	fi
	# clone snapshot
	if zfs list -t filesystem -H -o name "${zfs_clone}" &>/dev/null; then
		echo clone filesystem \"${zfs_clone}\" already exists, this must be a repeat try, moving to grub_stor.
		echo if you need a fresh clone then please remove this one using the command \"zfs destroy [filesystem]\"
	else
		echo generating zfs clone filesystem \"${zfs_clone}\"
		zfs clone "${zfs_snap}" "${zfs_clone}"
	fi

	echo
	echo ...... zfs_name :: ${zfs_name}
	echo ....... version :: ${version}
	echo ...... zfs_date :: ${zfs_date}
	echo
	echo ...... zfs_base :: ${zfs_base}
	echo .... filesystem :: ${filesystem}
	echo ...... zfs_snap :: ${zfs_snap}
	echo ..... zfs_clone :: ${zfs_clone}
	echo
	echo . zfs_grub_base :: ${zfs_grub_base}
	echo . zfs_grub_seed :: ${zfs_grub_seed}
	echo . zfs_grub_stor :: ${zfs_grub_stor}
	echo

	# run grub update
	update-grub
}
function is_version_in_filesystem_name_malformed(){
	local filesystem=$1
	(( ${filesystem:+1} )) || return 1
	local version=$(get_version_in_filesystem_name "${filesystem}")
	! [[ "${version//[^[:digit:]]/}" =~ ^[[:digit:]]{4}$ ]]
}
function is_date_in_filesystem_name_malformed(){
	local filesystem=$1
	(( ${filesystem:+1} )) || return 1
	local date=$(get_date_in_filesystem_name "${filesystem}")
	! date --date="${date//./\/}" &>/dev/null
}
function get_version_in_filesystem_name(){
	local filesystem=$1
	(( ${filesystem:+1} )) || return 1
	echo "${filesystem: -15:4}"
}
function get_date_in_filesystem_name(){
	local filesystem=$1
	(( ${filesystem:+1} )) || return 1
	echo "${filesystem: -10}"
}
function get_name_in_filesystem_name(){
	local filesystem=$1
	(( ${filesystem:+1} )) || return 1
	basename "${filesystem::-16}"
}
function get_date_for_clone_filesystem_name(){
	date +%Y.%m.%d
}
function get_next_version_for_filesystem_name(){
	local filesystem=$1
	local name=$2
	local version
	(( ${filesystem:+1} )) || return 1
	< <(zfs list -t filesystem -H -o name -d 1 -r "${filesystem%/}" |
		grep "^${filesystem%/}/${name}-" |
		while read filesystem; do
			is_version_in_filesystem_name_malformed "${filesystem}" ||
			get_version_in_filesystem_name "${filesystem}"
		done |
		sort -r) read version
	version=000$(( ${version:- -1} + 1 ))
	echo ${version: -4}
}

function get_cache(){
	local func_to_cache=$1
	if declare -F "${func_to_cache}" &>/dev/null ; then
		shift
	else
		local tail tails delim
		while true; do
			while read tails; do
				while read delim; do
					for tail in ${tails} ${tails^} ${tails^^}; do
						# test for funcname tail and parent function
						[[ "${FUNCNAME[1]}" =~ (.*)("${delim}${tail}"$) ]] &&
							declare -F "${BASH_REMATCH[1]}" &>/dev/null &&
							func_to_cache="${BASH_REMATCH[1]}" &&
							break 4
					done
				done <<-DELIM
					_

				DELIM
			done <<-TAILS
				cache
			TAILS
			# if all function name tests fail, fail this
			return 1
		done
	fi
	# time till cache is removed in minutes
	local cache_refresh_gate=${1:-2}

	# define cache file
	local cache="/tmp/.$(basename "$0")_${func_to_cache}_${PPID}"

	# if cache exists return cache
	if [ -e "${cache}" ]; then
		cat "${cache}"
	# else set cache clear job, run and tee to cache 
	else
		cat <<-AT | at -q c now + ${cache_refresh_gate} minutes 2>/dev/null
			/bin/rm -f "${cache}"
		AT
		< <(${func_to_cache} 2>/dev/null) tee "${cache}"
	fi
}


# function readfd: file descriptor is flushed to variable REPLY[${fd}] and printed to stdout; (${fd} is the supplied file descriptor)
#                   multiple fd's can be requested, only the last fd reports false if empty (not the same as closed)
function readfd(){
	local _name _fd IFS=$''
	(( $# )) || set -- 3
	for _fd in $*; do
		_name=${_fd##[^[:alpha:]_]*}
		_fd=${!_name:=${_fd}}
		if [ -e "/proc/${BASHPID}/fd/${_fd}" ]; then
			echo    -n $'\255'  >&${_fd}
			# the "-r" argument in the following read command preserves escaped characters
			read -r -d $'\255' -u ${_fd} REPLY[${_fd}]
			case "${FUNCNAME[1]}" in
				flushfd)	;;
				*)		printf %s "${REPLY[${_fd}]}";;
			esac
		else
			unset REPLY[${_fd}]
		fi
	done
	(( ${#REPLY[${_fd}]} ))
}
# function flushfd: is quiet readfd.
#                   file descriptor is flushed to variable REPLY[${fd}] but not printed; (${fd} is the supplied file descriptor)
#                   multiple fd's can be requested, only the last fd reports false if empty (not the same as closed)
function flushfd(){
	readfd "$@"
}
# function teefd: first arg is the file desciptor to print and clone
#                 remaining args are the file desciptors to create/clone
#                 if all or all but the first arg are un-set then teefd prints the fd and reclones into itself
function teefd(){
	local _fd _name _sfd=${1:-3}
	case "${FUNCNAME[1]}" in
		clonefd)	flushfd ${_sfd};;	
		*)		readfd ${_sfd};;
	esac
	shift
	(( $# )) || set -- ${_sfd}
	for _fd in $*; do
		_name=${_fd##[^[:alpha:]_]*}
		_fd=${!_name:=${_fd}}
		[ -e "/proc/${BASHPID}/fd/${_fd}" ] || eval "exec ${_fd}<><(:)"
		printf %s "${REPLY[${_sfd}]}" >&${_fd}
	done
	(( ${#REPLY[${_sfd}]} ))
}
# function clonefd: is teefd quiet; arguments work the same
function clonefd(){
	teefd "$@"
}
# function teefd: first arg is the file desciptor to print and clone
#                 remaining args are the file desciptors to create/clone
#                 if all or all but the first arg are un-set then teefd prints the fd and reclones into itself
function teefd(){
	local _fd _name _sfd=${1:-3}
	case "${FUNCNAME[1]}" in
		clonefd)	flushfd ${_sfd};;	
		*)		readfd ${_sfd};;
	esac
	shift
	(( $# )) || set -- ${_sfd}
	for _fd in $*; do
		_name=${_fd##[^[:alpha:]_]*}
		_fd=${!_name:=${_fd}}
		[ -e "/proc/${BASHPID}/fd/${_fd}" ] || eval "exec ${_fd}<><(:)"
		printf %s "${REPLY[${_sfd}]}" >&${_fd}
	done
	(( ${#REPLY[${_sfd}]} ))
}
# function clonefd: is teefd quiet; arguments work the same
function clonefd(){
	teefd "$@"
}
function mkfd(){
	local _fd _name
	(( $# )) || set -- 3
	for _fd in $*; do
		_name=${_fd##[^[:alpha:]_]*}
		_fd=${!_name:=${_fd}}
		[ -e "/proc/${BASHPID}/fd/${_fd}" ] || eval "exec ${_fd}<><(:)"
	done
}
function clearfd(){
	local _fd _name
	(( $# )) || set -- 3
	for _fd in $*; do
		_name=${_fd##[^[:alpha:]_]*}
		_fd=${!_name:=${_fd}}
		eval "exec ${_fd}<><(:)"
	done
}
function closefd(){
	local _fd _name
	(( $# )) || set -- 3
	for _fd in $*; do
		_name=${_fd##[^[:alpha:]_]*}
		_fd=${!_name:=${_fd}}
		eval "exec ${_fd}<&-"
	done
}
function randomfd(){
	local _fd
	for _fd in $*; do
		local _loop='3'
		while (( _loop-- )); do
			eval "exec {${_fd}}<><(:)" 2>/dev/null && break
		done
		unset REPLY[${_fd}]
	done
}

# GLOBAL VARS
zfs_grub_base='/boot/zfs'
grub_vmlinuz=
main "$@"
