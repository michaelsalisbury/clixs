#!/bin/bash

__sed_escape_string () {
	local count=${1:-1}
	local sed_special_chars=$' >'
	local sed_escape_chars=$'\\\\'
	local sed_escape_chars=$(count=${count//[^[:digit:]]/} < <(printf %$(( count * 2 ))s) sed "s/./${sed_escape_chars}/g")
	sed "s/\([${sed_special_chars}]\)/${sed_escape_chars}\1/g"
}
__grub_list_menuentries_raw () {
    local config_file=$1
	cat <<-AWK | awk -F "[\"']" -f <(cat) "${config_file}"
		/^[ \t]*menuentry[ \t]/{
			menuentry=\$2
			if (submenu_l)
				for (submenu_i = 1; submenu_i <= submenu_l; submenu_i++)
					printf submenus[submenu_i]">"
			print menuentry
		}
		/^[ \t]*submenu[ \t]/{
			submenu_l++
			submenus[submenu_l]=\$2
		}
		/}[ \t]*$/{
			if (menuentry) {
				menuentry=""
			} else if (submenu_l) {
				delete submenus[submenu_l]
				submenu_l--
			}
		}
	AWK
}
__grub_list_menuentries_new () {
    local config_file=$(__grub_dir)/grub.cfg
	# the list of posibles completions must have escaped characters escaped twice
    if [ -f "$config_file" ];then
		local  cur=${COMP_WORDS[COMP_CWORD]}
		local list=$(__grub_list_menuentries_raw $config_file)
			   cur=$(<<< "${cur}"  __sed_escape_string 1) 
			  list=$(<<< "${list}" __sed_escape_string 2)
        local IFS=$'\n'
        COMPREPLY=( $(compgen -W "$list" -- "$cur" ))
    fi
}

# in addition to replacing __grub_list_menuentries with __grub_list_menuentries_new in the _grub_set_entry command
# we need to remove the "-o filenames" from the complete command that enables autocomplete for grub-set-default and grub-reboot
# the "-o filenames" is a poor choice since many of grubs auto generated titles contain forward slashes
__grub_autocomplete_sed_tweaks="/^[[:space:]]*__grub_list_menuentries$/s/$/_new/
				/^[[:space:]]*complete -F _grub_set_entry/s/-o filenames//"
. <(sed "${__grub_autocomplete_sed_tweaks}" /etc/bash_completion.d/grub)


__my_zfs_list_bootable_filesystems () {
	local zfs_grub_base="$(__grub_dir)/../zfs/"
	find "${zfs_grub_base}" -type d |
		tac |
		awk 'LAST~"^"$0{next}{print;LAST=$0}' |
		sed "s|^${zfs_grub_base}||" |
		xargs -i"$'\255'" zfs list -H -o name "$'\255'" 2>/dev/null
}
__my_zfs_list_chroot_zvol_cache(){
	local cache_refresh_gate='5'
	local cache="/tmp/.${FUNCNAME[1]}_${FUNCNAME}_${PPID}"
	if [ -e "${cache}" ]; then
		cat "${cache}"
	else
		cat <<-AT | at -q c now + ${cache_refresh_gate} minutes &>/dev/null
			/bin/rm -f "${cache}"
		AT
		__my_zfs_list_chroot_zvol 2>/dev/null | tee "${cache}"
	fi
}
__my_zfs_list_chroot_zvol(){
	if (( $# == 0 )); then
		echo Retrieving list of zfs zvols... 1>&2
		local pool
		for   pool in $(zpool list -H -o name); do
			echo Retrieving list of zfs zvols for pool: ${pool} 1>&2
			(
				while read device; do
					echo Evaluating block devices: ${device} 1>&2
					${FUNCNAME} "/dev/zvol/${device}" &
				done < <(zfs list -H -o name -t volume -r ${pool})
				wait
			) &
		done
		wait
	elif (( $# == 1 )) && [ "${1: -2}" == "-*" ]; then
			# error
			< <(file -sL ${1%??}) sed 's/^/ERROR: /' 1>&2
	elif (( $# == 1 )) && [ "${1: -2}" != "-*" ]; then
		local   fouta fout=$(< <(file -sL $1) sed 's/UUID: /UUID=/')
		read -a fouta <<< "${fout}"

		[ "filesystem"  == "${fouta[5]}"     ] && local ISEXTFS=true || local ISEXTFS=false
		${ISEXTFS} && echo "$1" && return

		[ "boot sector" == "${fouta[*]:2:2}" ] && local ISBOOT=true  || local ISBOOT=false
		if ${ISBOOT}; then
			local ID_FS_UUID ID_FS_UUID_ENC ID_FS_TYPE
			. <(blkid -o udev $1)
			[ "ntfs" == "${ID_FS_TYPE}" ]      && local ISNTFS=true  || local ISNTFS=false
			${ISNTFS} && return
			${FUNCNAME} ${fouta[0]%:}-* && return
		fi

		[ "swap file"   == "${fouta[*]:2:2}" ] && local ISSWAP=true  || local ISSWAP=false
		${ISSWAP} && return
		# indicates zvol or part is LV
		[ "LVM2 PV"     == "${fouta[*]:1:2}" ] && local ISLVM2=true  || local ISLVM2=false
		${ISLVM2} && return
		# indicates that zvol is either encrypted/zfs/btrfs
		[ "data"        == "${fouta[*]:1}"   ] && local ISDATA=true  || local ISDATA=false
		${ISDATA} && return
	else
		while (( $# )); do
			echo Evaluating block devices: ${1#/dev/zvol/} 1>&2
			${FUNCNAME} $1 &
			shift
		done
		wait
	fi
}

_my_zfs_utils () {
	local script
	if < <(alias "${1}" 2>/dev/null) read; then
		REPLY=${REPLY##*=\'}
		REPLY=${REPLY%\'}
		script=${REPLY//\~/${HOME}}
	elif < <(which "$1" 2>/dev/null) read; then
		script=${REPLY}
	else
		script="${HOME}/.scripts/my-zfs-utils.sh"
	fi
	if [ -f "$script" ];then
		COMPREPLY=()
		local cur=`_get_cword`
		local prev=${COMP_WORDS[COMP_CWORD-1]}

		if (( COMP_CWORD == 1 )); then
			local list=$("${script}")
		else
			case "${COMP_WORDS[1]}" in
				grub_reboot|\
				grub_set_default)
					__grub_list_menuentries_new
					return
					;;
				remove_zfs_fs_empty_sub_fldrs)
					local list=$(zfs list -H -o name -t filesystem)
					;;
				update_zfs_initrd|\
				update_zfs_initrd_undo|\
				clone_zfs_filesystem|\
				remove_zfs_filesystem|\
				dependent_zfs_fs_list|\
				mount_zfs_filesystem|\
				chroot_zfs_filesystem)
					local list=$(__my_zfs_list_bootable_filesystems)
					;;
				list_chroot_zvol)
					local list=$(__my_zfs_list_chroot_zvol_cache)
					;;
			esac
		fi
		local IFS=$'\n'
		COMPREPLY=( $(compgen -W "${list}" -- "$cur" ))
	fi
}
__my_zfs_utils_program="my-zfs-utils"
complete -F _my_zfs_utils ${__my_zfs_utils_program}
unset __my_zfs_utils_program


